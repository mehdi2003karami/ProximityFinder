/*
  Localizable.strings
  ProximityFinder

  Created by Mehdi Karami on 5/24/23.
  
*/

// Format Strings
"accuracy_of_one_decimal" = "%.1f";
"whole_number_suffix" = ".0";

// Assets Name
"thumb" = "Thumb";

"lottie_launch_screen_light" = "LaunchScreen-Light";
"lottie_launch_screen_dark" = "LaunchScreen-Dark";

// Segues Identifier
"segue_to_proximityFinderVC" = "ProximityFinder";

"overview_title" = "Proximity Finder Overview";

"overview_description" = "We'll explore how the algorithm efficiently finds the nearest pair of points in a 2D screen. The Closest Pair algorithm is designed to have a time complexity of O(n log n) with a divide-and-conquer approach, making it more efficient than a brute force approach.";

"overview_algorithm_steps" = "Algorithm Steps:

1. Sort points based on x-coordinate.

2. Use closestPairRecursive function to recursively find the closest pair.

3. Base case: If there are 2 or 3 points, perform brute force search for minimum distance.

4. For more than 3 points, divide set into two halves and recursively call closestPairRecursive.

5. Combine results from left and right halves to find the minimum distance and closest pair.

6. Calculate a dividing line based on middle points and collect points within specified distance.

7. Call closestPairSplit on split points to find closest pair within specified distance.

8. Return the closest pair among the left, right, and split pairs.";

"overview_time_architecture" = "This app was developed using the UIKit framework in iOS, following the MVC (Model-View-Controller) architectural pattern.
This pattern separates the app's components into three main parts: model, view, and controller.";

"overview_acknowledgment" = "If you have any further questions or need assistance, feel free to ask. Happy exploring and best of luck with your Algorithm Design!";

